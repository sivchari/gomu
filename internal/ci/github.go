package ci

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"

	"github.com/sivchari/gomu/internal/report"
)

// GitHubIntegration provides GitHub-specific CI integration.
type GitHubIntegration struct {
	token      string
	repository string
	prNumber   int
	client     *http.Client
	apiBase    string
}

// NewGitHubIntegration creates a new GitHub integration.
func NewGitHubIntegration(token, repository string, prNumber int) *GitHubIntegration {
	return &GitHubIntegration{
		token:      token,
		repository: repository,
		prNumber:   prNumber,
		client:     &http.Client{Timeout: 30 * time.Second},
		apiBase:    "https://api.github.com",
	}
}

// PRComment represents a GitHub PR comment.
type PRComment struct {
	Body string `json:"body"`
}

// Comment represents a GitHub comment response.
type Comment struct {
	ID   int    `json:"id"`
	Body string `json:"body"`
}

// ListPRComments lists all comments on a pull request.
func (g *GitHubIntegration) ListPRComments(ctx context.Context) ([]Comment, error) {
	url := fmt.Sprintf("%s/repos/%s/issues/%d/comments",
		g.apiBase, g.repository, g.prNumber)

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, url, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Authorization", "token "+g.token)
	req.Header.Set("Accept", "application/vnd.github.v3+json")

	resp, err := g.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("failed to list comments: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)

		return nil, fmt.Errorf("failed to list comments: %s (status: %d)", string(body), resp.StatusCode)
	}

	var comments []Comment
	if err := json.NewDecoder(resp.Body).Decode(&comments); err != nil {
		return nil, fmt.Errorf("failed to decode comments: %w", err)
	}

	return comments, nil
}

// DeletePRComment deletes a comment on a pull request.
func (g *GitHubIntegration) DeletePRComment(ctx context.Context, commentID int) error {
	url := fmt.Sprintf("%s/repos/%s/issues/comments/%d",
		g.apiBase, g.repository, commentID)

	req, err := http.NewRequestWithContext(ctx, http.MethodDelete, url, nil)
	if err != nil {
		return fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Authorization", "token "+g.token)
	req.Header.Set("Accept", "application/vnd.github.v3+json")

	resp, err := g.client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to delete comment: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusNoContent {
		body, _ := io.ReadAll(resp.Body)

		return fmt.Errorf("failed to delete comment: %s (status: %d)", string(body), resp.StatusCode)
	}

	return nil
}

// CreatePRComment creates a comment on a pull request.
// It first deletes any existing mutation testing comments to avoid duplicates.
func (g *GitHubIntegration) CreatePRComment(ctx context.Context, summary *report.Summary, qualityResult *QualityGateResult) error {
	if g.prNumber == 0 || g.token == "" {
		return fmt.Errorf("missing required PR number or GitHub token")
	}

	// Delete existing mutation testing comments
	if err := g.deleteExistingMutationComments(ctx); err != nil {
		// Log error but don't fail the entire process
		fmt.Printf("Warning: failed to delete existing comments: %v\n", err)
	}

	comment := g.formatPRComment(summary, qualityResult)

	url := fmt.Sprintf("%s/repos/%s/issues/%d/comments",
		g.apiBase, g.repository, g.prNumber)

	payload := PRComment{Body: comment}

	jsonData, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("failed to marshal comment: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, url, bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Authorization", "token "+g.token)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/vnd.github.v3+json")

	resp, err := g.client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to create comment: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusCreated {
		body, _ := io.ReadAll(resp.Body)

		return fmt.Errorf("failed to create comment: %s (status: %d)", string(body), resp.StatusCode)
	}

	return nil
}

// deleteExistingMutationComments deletes any existing mutation testing comments.
func (g *GitHubIntegration) deleteExistingMutationComments(ctx context.Context) error {
	comments, err := g.ListPRComments(ctx)
	if err != nil {
		return fmt.Errorf("failed to list comments: %w", err)
	}

	for _, comment := range comments {
		if strings.Contains(comment.Body, "🧬 Mutation Testing Results") ||
			strings.Contains(comment.Body, "Generated by gomu mutation testing") {
			if err := g.DeletePRComment(ctx, comment.ID); err != nil {
				return fmt.Errorf("failed to delete comment %d: %w", comment.ID, err)
			}
		}
	}

	return nil
}

// formatPRComment formats the mutation testing results for PR comment.
func (g *GitHubIntegration) formatPRComment(summary *report.Summary, qualityResult *QualityGateResult) string {
	var buf strings.Builder

	buf.WriteString("## 🧬 Mutation Testing Results\n\n")

	// Calculate actual totals excluding ignored files (cmd/ directory)
	actualTotalMutants := 0
	actualKilledMutants := 0
	cmdFilesSkipped := 0
	cmdMutantsSkipped := 0

	// If Files is not empty, calculate from file reports
	if len(summary.Files) > 0 {
		for _, fileReport := range summary.Files {
			// Skip files in cmd/ directory (these should be ignored per .gomuignore)
			if strings.Contains(fileReport.FilePath, "/cmd/") || strings.HasPrefix(fileReport.FilePath, "cmd/") {
				cmdFilesSkipped++
				cmdMutantsSkipped += fileReport.TotalMutants
				continue
			}
			actualTotalMutants += fileReport.TotalMutants
			actualKilledMutants += fileReport.KilledMutants
		}
		// If we filtered out files but ended up with 0 actual mutants, use the original totals minus the skipped ones
		if actualTotalMutants == 0 && cmdFilesSkipped > 0 {
			actualTotalMutants = summary.TotalMutants - cmdMutantsSkipped
			actualKilledMutants = summary.KilledMutants
		}
	} else {
		// Fallback to summary totals if Files is empty
		actualTotalMutants = summary.TotalMutants
		actualKilledMutants = summary.KilledMutants
	}

	// Handle nil quality result
	var mutationScore float64

	var passed bool

	var reason string

	if qualityResult != nil {
		// Use the quality result's pass/fail decision and reason
		passed = qualityResult.Pass
		reason = qualityResult.Reason

		// Recalculate mutation score with filtered data if Files is available
		if actualTotalMutants > 0 {
			mutationScore = float64(actualKilledMutants) / float64(actualTotalMutants) * 100
		} else {
			mutationScore = qualityResult.MutationScore
		}
	} else if actualTotalMutants > 0 {
		// Calculate mutation score from filtered summary
		mutationScore = float64(actualKilledMutants) / float64(actualTotalMutants) * 100
		passed = mutationScore >= 80.0 // Default threshold
		reason = noQualityGateMessage
	}

	// Quality gate status
	if passed {
		buf.WriteString("✅ **Quality Gate: PASSED**\n\n")
	} else {
		buf.WriteString("❌ **Quality Gate: FAILED**\n\n")
	}

	// Summary
	buf.WriteString(fmt.Sprintf("**Overall Mutation Score:** %.1f%%\n", mutationScore))
	buf.WriteString(fmt.Sprintf("**Total Mutants:** %d\n", actualTotalMutants))
	buf.WriteString(fmt.Sprintf("**Killed:** %d\n", actualKilledMutants))
	buf.WriteString("\n")

	// File details - only show files with mutations
	hasFilesWithMutations := false

	for _, fileReport := range summary.Files {
		// Skip files in cmd/ directory
		if strings.Contains(fileReport.FilePath, "/cmd/") || strings.HasPrefix(fileReport.FilePath, "cmd/") {
			continue
		}
		if fileReport.TotalMutants > 0 {
			hasFilesWithMutations = true

			break
		}
	}

	if hasFilesWithMutations {
		buf.WriteString("### Files with Mutations\n\n")
		buf.WriteString("| File | Score | Mutants | Killed |\n")
		buf.WriteString("|------|-------|---------|--------|\n")

		// Sort and filter files
		for _, fileReport := range summary.Files {
			// Skip files with no mutations (likely ignored by .gomuignore)
			if fileReport.TotalMutants == 0 {
				continue
			}

			// Skip files in cmd/ directory (these should be ignored per .gomuignore)
			// Check if the path contains "/cmd/" to handle both absolute and relative paths
			if strings.Contains(fileReport.FilePath, "/cmd/") || strings.HasPrefix(fileReport.FilePath, "cmd/") {
				continue
			}

			// Truncate long file paths for better readability
			displayPath := fileReport.FilePath
			if len(displayPath) > 50 {
				displayPath = "..." + displayPath[len(displayPath)-47:]
			}

			buf.WriteString(fmt.Sprintf("| %s | %.1f%% | %d | %d |\n",
				displayPath,
				fileReport.MutationScore,
				fileReport.TotalMutants,
				fileReport.KilledMutants,
			))
		}

		buf.WriteString("\n")
	} else {
		buf.WriteString("No files analyzed.\n\n")
	}

	// Quality gate reason
	if !passed {
		buf.WriteString(fmt.Sprintf("**Failure Reason:** %s\n", reason))
	}

	buf.WriteString("\n---\n")
	buf.WriteString("*Generated by gomu mutation testing*")

	return buf.String()
}
