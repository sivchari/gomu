package ci

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"

	"github.com/sivchari/gomu/internal/report"
)

// GitHubIntegration provides GitHub-specific CI integration.
type GitHubIntegration struct {
	token      string
	repository string
	prNumber   int
	client     *http.Client
	apiBase    string
}

// NewGitHubIntegration creates a new GitHub integration.
func NewGitHubIntegration(token, repository string, prNumber int) *GitHubIntegration {
	return &GitHubIntegration{
		token:      token,
		repository: repository,
		prNumber:   prNumber,
		client:     &http.Client{Timeout: 30 * time.Second},
		apiBase:    "https://api.github.com",
	}
}

// PRComment represents a GitHub PR comment.
type PRComment struct {
	Body string `json:"body"`
}

// CreatePRComment creates a comment on a pull request.
func (g *GitHubIntegration) CreatePRComment(summary *report.Summary, qualityResult *QualityGateResult) error {
	if g.prNumber == 0 || g.token == "" {
		return fmt.Errorf("missing required PR number or GitHub token")
	}

	comment := g.formatPRComment(summary, qualityResult)

	url := fmt.Sprintf("%s/repos/%s/issues/%d/comments",
		g.apiBase, g.repository, g.prNumber)

	payload := PRComment{Body: comment}
	jsonData, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("failed to marshal comment: %w", err)
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Authorization", "token "+g.token)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept", "application/vnd.github.v3+json")

	resp, err := g.client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to create comment: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusCreated {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("failed to create comment: %s (status: %d)", string(body), resp.StatusCode)
	}

	return nil
}

// formatPRComment formats the mutation testing results for PR comment.
func (g *GitHubIntegration) formatPRComment(summary *report.Summary, qualityResult *QualityGateResult) string {
	var buf strings.Builder
	buf.WriteString("## 🧬 Mutation Testing Results\n\n")

	// Quality gate status
	if qualityResult.Pass {
		buf.WriteString("✅ **Quality Gate: PASSED**\n\n")
	} else {
		buf.WriteString("❌ **Quality Gate: FAILED**\n\n")
	}

	// Summary
	buf.WriteString(fmt.Sprintf("**Overall Mutation Score:** %.1f%%\n", qualityResult.MutationScore))
	buf.WriteString(fmt.Sprintf("**Total Mutants:** %d\n", summary.TotalMutants))
	buf.WriteString(fmt.Sprintf("**Killed:** %d\n", summary.KilledMutants))
	buf.WriteString("\n")

	// File details
	if len(summary.Files) > 0 {
		buf.WriteString("| File | Score | Mutants | Killed |\n")
		buf.WriteString("|------|-------|---------|--------|\n")
		for _, fileReport := range summary.Files {
			buf.WriteString(fmt.Sprintf("| %s | %.1f%% | %d | %d |\n",
				fileReport.FilePath,
				fileReport.MutationScore,
				fileReport.TotalMutants,
				fileReport.KilledMutants,
			))
		}
		buf.WriteString("\n")
	} else {
		buf.WriteString("No files analyzed.\n\n")
	}

	// Quality gate reason
	if !qualityResult.Pass {
		buf.WriteString(fmt.Sprintf("**Failure Reason:** %s\n", qualityResult.Reason))
	}

	buf.WriteString("\n---\n")
	buf.WriteString("*Generated by gomu mutation testing*")

	return buf.String()
}
