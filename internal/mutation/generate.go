//go:build ignore

package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

type mutatorInfo struct {
	Name       string
	StructName string
}

const registryTemplate = `// Code generated by go generate. DO NOT EDIT.

package mutation

// getAllMutators returns all available mutators
func getAllMutators() []Mutator {
	return []Mutator{
{{- range .}}
		&{{.StructName}}{},
{{- end}}
	}
}
`

func main() {
	mutators, err := findMutators(".")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error finding mutators: %v\n", err)
		os.Exit(1)
	}

	if err := generateRegistry(mutators); err != nil {
		fmt.Fprintf(os.Stderr, "Error generating registry: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Generated registry with %d mutators\n", len(mutators))
}

func findMutators(dir string) ([]mutatorInfo, error) {
	var mutators []mutatorInfo

	files, err := filepath.Glob("*.go")
	if err != nil {
		return nil, err
	}

	for _, file := range files {
		if strings.HasSuffix(file, "_test.go") || 
		   strings.HasSuffix(file, "registry.go") ||
		   strings.HasSuffix(file, "generate.go") ||
		   strings.HasSuffix(file, "engine.go") {
			continue
		}

		mutator, err := parseMutatorFile(file)
		if err != nil {
			continue // Not a mutator file
		}

		if mutator != nil {
			mutators = append(mutators, *mutator)
		}
	}

	return mutators, nil
}

func parseMutatorFile(filename string) (*mutatorInfo, error) {
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, filename, nil, 0)
	if err != nil {
		return nil, err
	}

	for _, decl := range node.Decls {
		if genDecl, ok := decl.(*ast.GenDecl); ok {
			for _, spec := range genDecl.Specs {
				if typeSpec, ok := spec.(*ast.TypeSpec); ok {
					if strings.HasSuffix(typeSpec.Name.Name, "Mutator") {
						if _, ok := typeSpec.Type.(*ast.StructType); ok {
							name := strings.ToLower(strings.TrimSuffix(typeSpec.Name.Name, "Mutator"))
							return &mutatorInfo{
								Name:       name,
								StructName: typeSpec.Name.Name,
							}, nil
						}
					}
				}
			}
		}
	}

	return nil, fmt.Errorf("no mutator found in %s", filename)
}

func generateRegistry(mutators []mutatorInfo) error {
	tmpl := template.Must(template.New("registry").Parse(registryTemplate))
	
	file, err := os.Create("registry.go")
	if err != nil {
		return err
	}
	defer file.Close()

	return tmpl.Execute(file, mutators)
}