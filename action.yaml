name: 'Gomu Mutation Testing'
description: 'Run mutation testing for Go projects using gomu with incremental analysis'
author: 'sivchari'

branding:
  icon: 'git-branch'
  color: 'blue'

inputs:
  go-version:
    description: 'Go version to use'
    required: false
    default: '1.21'
  
  
  working-directory:
    description: 'Working directory for the action'
    required: false
    default: '.'
  
  # Version control
  version:
    description: 'gomu version to use (latest, nightly, local, or specific version like v1.0.0)'
    required: false
    default: 'latest'
  
  # Quality Gate Settings
  threshold:
    description: 'Minimum mutation score threshold (0-100)'
    required: false
    default: '80'
  
  fail-on-gate:
    description: 'Whether to fail the build if quality gate is not met'
    required: false
    default: 'true'
  
  # Performance Settings
  workers:
    description: 'Number of parallel workers'
    required: false
    default: '4'
  
  timeout:
    description: 'Test timeout in seconds'
    required: false
    default: '30'
  
  # Incremental Analysis
  incremental:
    description: 'Enable incremental analysis for performance'
    required: false
    default: 'true'
  
  base-branch:
    description: 'Base branch for incremental analysis'
    required: false
    default: 'main'
  
  # Output Settings
  output:
    description: 'Output format (json, html, console)'
    required: false
    default: 'json'
  
  upload-artifacts:
    description: 'Whether to upload mutation reports as artifacts'
    required: false
    default: 'true'
  
  comment-pr:
    description: 'Whether to comment on pull requests with results'
    required: false
    default: 'true'

outputs:
  mutation-score:
    description: 'The mutation score percentage'
    value: ${{ steps.mutation-test.outputs.mutation-score }}
  
  total-mutants:
    description: 'Total number of mutants generated'
    value: ${{ steps.mutation-test.outputs.total-mutants }}
  
  killed-mutants:
    description: 'Number of killed mutants'
    value: ${{ steps.mutation-test.outputs.killed-mutants }}
  
  survived-mutants:
    description: 'Number of survived mutants'
    value: ${{ steps.mutation-test.outputs.survived-mutants }}

runs:
  using: 'composite'
  steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ inputs.go-version }}
    
    - name: Setup git for merge base
      shell: bash
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git fetch origin main:main || git fetch origin main || true
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: go mod download
    
    - name: Run tests first
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: go test ./...
    
    - name: Install gomu
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ "${{ inputs.version }}" = "local" ]; then
          echo "Using local gomu binary from PATH..."
          if ! command -v gomu &> /dev/null; then
            echo "‚ùå Error: local gomu not found in PATH"
            echo "üí° Hint: Build gomu first with 'go build -o gomu ./cmd/gomu' and add it to PATH"
            exit 1
          fi
          echo "‚úÖ Found local gomu at: $(which gomu)"
        elif [ "${{ inputs.version }}" = "nightly" ]; then
          echo "Building gomu from latest source (nightly)..."
          # Clone the latest main branch and build from source
          git clone https://github.com/sivchari/gomu.git /tmp/gomu
          cd /tmp/gomu
          go build -o gomu ./cmd/gomu
          sudo mv gomu /usr/local/bin/gomu
          chmod +x /usr/local/bin/gomu
        else
          echo "Installing gomu from releases..."
          go install github.com/sivchari/gomu/cmd/gomu@${{ inputs.version }}
        fi
        
        # Verify installation
        gomu version || echo "Version command not available yet"
    
    - name: Run mutation testing
      id: mutation-test
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        set -e
        
        echo "Running mutation testing with gomu..."
        # Pass all settings via CLI flags (no config file needed)
        gomu run \
          --ci-mode \
          --workers=${{ inputs.workers }} \
          --timeout=${{ inputs.timeout }} \
          --threshold=${{ inputs.threshold }} \
          --incremental=${{ inputs.incremental }} \
          --base-branch=${{ inputs.base-branch }} \
          --output=${{ inputs.output }} \
          --fail-on-gate=${{ inputs.fail-on-gate }}
        
        # Parse results if report exists
        if [ -f "mutation-report.json" ]; then
          mutation_score=$(jq -r '.mutationScore // 0' mutation-report.json)
          total_mutants=$(jq -r '.totalMutants // 0' mutation-report.json)
          killed_mutants=$(jq -r '.killed // 0' mutation-report.json)
          survived_mutants=$(jq -r '.survived // 0' mutation-report.json)
          
          echo "mutation-score=$mutation_score" >> $GITHUB_OUTPUT
          echo "total-mutants=$total_mutants" >> $GITHUB_OUTPUT
          echo "killed-mutants=$killed_mutants" >> $GITHUB_OUTPUT
          echo "survived-mutants=$survived_mutants" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Mutation testing completed"
          echo "üìä Mutation Score: $mutation_score%"
          echo "üß¨ Total Mutants: $total_mutants"
          echo "‚ö∞Ô∏è  Killed: $killed_mutants"
          echo "üèÉ Survived: $survived_mutants"
          
          # Threshold check is handled by gomu based on config file settings
          # Quality gate configuration should be managed in .gomu.yaml
        else
          echo "‚ö†Ô∏è No mutation report found"
        fi
      env:
        CI_MODE: true
        GITHUB_PR_NUMBER: ${{ github.event.number }}
        GITHUB_BASE_REF: ${{ github.event.pull_request.base.ref || 'main' }}
        GITHUB_HEAD_REF: ${{ github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
    
    - name: Upload mutation report
      if: ${{ inputs.upload-artifacts == 'true' && always() }}
      uses: actions/upload-artifact@v4
      with:
        name: mutation-report
        path: |
          ${{ inputs.working-directory }}/mutation-report.html
          ${{ inputs.working-directory }}/mutation-report.json
          ${{ inputs.working-directory }}/.gomu_history.json
    
